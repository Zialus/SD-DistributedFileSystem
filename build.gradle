plugins {
    id 'info.solidsoft.pitest' version '1.19.0-rc.1'
    id "se.patrikerdes.use-latest-versions" version "0.2.19"
    id "com.github.ben-manes.versions" version "0.52.0"
    id "net.ltgt.errorprone" version "4.3.0"
    id "com.github.spotbugs" version "6.4.0"
    id "pmd"
    id 'checkstyle'
    id "java"
    id "idea"
    id 'jacoco'
    id "org.sonarqube" version "6.3.1.5724"
    id "io.freefair.lombok" version "9.0.0"
    id "nebula.lint" version "21.1.1"
}

sonarqube {
    properties {
        property "sonar.projectKey", "Zialus_SD-DistributedFileSystem"
        property "sonar.organization", "zialus-github"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

group = 'fcup'
version = '1.0-SNAPSHOT'

Boolean enableErrorProne = System.properties['enableErrorProne']
println "[IMPORTANT INFORMATION] ErrorProne is ${enableErrorProne ? 'enabled' : 'disabled'}"

repositories {
    mavenCentral()
}

dependencies {
    testImplementation('org.junit.jupiter:junit-jupiter:5.13.4')
    testRuntimeOnly('org.junit.platform:junit-platform-launcher:1.13.4')

    implementation('org.jline:jline:3.30.6')

    spotbugsPlugins('com.h3xstream.findsecbugs:findsecbugs-plugin:1.14.0')
    spotbugsPlugins('com.mebigfatguy.sb-contrib:sb-contrib:7.6.14')

    annotationProcessor('com.uber.nullaway:nullaway:0.12.9')
    errorprone('com.google.errorprone:error_prone_core:2.41.0')
    errorprone('tech.picnic.error-prone-support:error-prone-contrib:0.24.0')
    errorprone('tech.picnic.error-prone-support:refaster-runner:0.24.0')
}

tasks.withType(JavaCompile).configureEach {
    options.errorprone.enabled = enableErrorProne ?: false
    options.errorprone {
        option("NullAway:AnnotatedPackages", "fcup")
    }
    options.compilerArgs += ['-Xlint:all']
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
    }

    reports {
        html.required = true
    }
}

// Don't produce default Jar
jar.enabled = false

def jarPackage(String groupName, String artifactName, String artifactVersion) {
    return tasks.create("jar_${artifactName}", Jar) {
        getArchiveBaseName().set(artifactName)
        getArchiveVersion().set(artifactVersion)

        from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }

        from(sourceSets.main.output) {
            include "$groupName/**"
        }

        manifest {
            attributes(
                    'Main-Class': "$groupName.$artifactName"
            )
        }

    }
}

artifacts {
    archives jarPackage("$group", "StorageServer", "$version"),
            jarPackage("$group", "Client", "$version"),
            jarPackage("$group", "MetadataServer", "$version")
}

pmd {
    ignoreFailures = true
}

pmdMain {
    reports {
        xml.required = false
        html.required = true
    }
}

pmdTest {
    reports {
        xml.required = false
        html.required = true
    }
}

pitest {
    junit5PluginVersion = '1.2.1'
    pitestVersion = '1.19.1'
    mutators = ["ALL"]
}

jacoco {
    toolVersion = '0.8.13'
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}

lombok {
    version = '1.18.40'
}

spotbugs {
    toolVersion = '4.9.4'
    ignoreFailures = true
    showStackTraces = false
    showProgress = true
}

spotbugsMain {
    reports {
        xml.required = false
        html.required = true
    }
}

spotbugsTest {
    reports {
        xml.required = false
        html.required = true
    }
}

checkstyle {
    toolVersion = '11.0.1'
    showViolations = false
    ignoreFailures = true
}

checkstyleMain {
    reports {
        xml.required = false
        html.required = true
    }
}

checkstyleTest {
    reports {
        xml.required = false
        html.required = true
    }
}
