plugins {
    id 'info.solidsoft.pitest' version '1.15.0'
    id "se.patrikerdes.use-latest-versions" version "0.2.18"
    id "com.github.ben-manes.versions" version "0.51.0"
    id "net.ltgt.errorprone" version "3.1.0"
    id "com.github.spotbugs" version "6.0.15"
    id "pmd"
    id 'checkstyle'
    id "java"
    id "idea"
    id 'jacoco'
    id "org.sonarqube" version "5.0.0.4638"
    id "io.freefair.lombok" version "8.6"
}

sonarqube {
    properties {
        property "sonar.projectKey", "Zialus_SD-DistributedFileSystem"
        property "sonar.organization", "zialus-github"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

group 'fcup'
version '1.0-SNAPSHOT'

Boolean enableErrorProne = System.properties['enableErrorProne']
println "[IMPORTANT INFORMATION] ErrorProne is ${enableErrorProne ? 'enabled' : 'disabled'}"

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
    testImplementation 'org.junit.platform:junit-platform-launcher:1.10.2'

    implementation 'org.jline:jline:3.26.1'

    spotbugsPlugins('com.h3xstream.findsecbugs:findsecbugs-plugin:1.13.0') { transitive = false }
    spotbugsPlugins('com.mebigfatguy.sb-contrib:sb-contrib:7.6.4') { transitive = false }

    annotationProcessor "com.uber.nullaway:nullaway:0.10.26"
    errorprone 'com.google.errorprone:error_prone_core:2.27.1'
}

tasks.withType(JavaCompile).configureEach {
    options.errorprone.enabled = enableErrorProne ?: false
    options.errorprone {
        option("NullAway:AnnotatedPackages", "fcup")
    }
    options.compilerArgs += ['-Xlint:all']
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
    }

    reports {
        html.required = true
    }
}

// Don't produce default Jar
jar.enabled = false

def jarPackage(String groupName, String artifactName, String artifactVersion) {
    return tasks.create("jar_${artifactName}", Jar) {
        getArchiveBaseName().set(artifactName)
        getArchiveVersion().set(artifactVersion)

        from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }

        from(sourceSets.main.output) {
            include "$groupName/**"
        }

        manifest {
            attributes(
                    'Main-Class': "$groupName.$artifactName"
            )
        }

    }
}

artifacts {
    archives jarPackage("$group", "StorageServer", "$version"),
            jarPackage("$group", "Client", "$version"),
            jarPackage("$group", "MetadataServer", "$version")
}

pmd {
    ignoreFailures = true
}

pmdMain {
    reports {
        xml.required = false
        html.required = true
    }
}

pmdTest {
    reports {
        xml.required = false
        html.required = true
    }
}

pitest {
    junit5PluginVersion = '1.2.0'
    pitestVersion = '1.15.0'
    mutators = ["ALL"]
}

jacoco {
    toolVersion = '0.8.12'
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}

lombok {
    version = '1.18.32'
}

spotbugs {
    toolVersion = '4.8.5'
    ignoreFailures = true
    showStackTraces = false
    showProgress = true
}

spotbugsMain {
    reports {
        xml.required = false
        html.required = true
    }
}

spotbugsTest {
    reports {
        xml.required = false
        html.required = true
    }
}

checkstyle {
    toolVersion = '10.17.0'
    showViolations = false
    ignoreFailures = true
}

checkstyleMain {
    reports {
        xml.required = false
        html.required = true
    }
}

checkstyleTest {
    reports {
        xml.required = false
        html.required = true
    }
}
